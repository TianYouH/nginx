
#user  nobody;
worker_processes  1;

# 日志 error.log 处理http请求错误状态及nginx服务的错误状态 根基不同级别 存储
# error_log  logs/error.log  warn;
# error_log  logs/error.log  notice;
# error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http { # 子配置文件
    include       mime.types;
    default_type  application/octet-stream;

    # 日志类型 nginx 以$开头的nginx的变量组成的日志格式
    log_format  main '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';

    # 日志 nginx的每次http请求的访问状态，用于分析每次访问请求和客户的交互，以及行为的分析
    # main 日志记录格式 对应 log_format 28 -> 23行
    access_log  logs/access.log  main;

    # nginx 一大优势，默认打开
    sendfile        on;
    #tcp_nopush     on;

    # 客户端与服务端的超时时间 s(秒)
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # 导入子服务，或直接写子服务
    # include conf.d/*.conf;
    server {
        listen       80; # 服务监听端口
        server_name  localhost; # 服务域名方式访问

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location /mystatus {
            stud_status; # http_stub_status_module模块测试  nginx客户端状态
        }

        # 一个server可以多个location /:默认路径
        location / {
            root   html; # 存放首页路径
            index  index.html index.htm; # 默认页面
        }


        # 将服务器错误页面重定向到静态页面 /50x.html
        error_page  404              /404.html;
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # 将PHP脚本代理到Apache上监听127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # 将PHP脚本传递到FastCGI服务器，监听127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # 如果Apache的文档根目录与nginx的根目录一致，则拒绝访问.htaccess文件
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # 另一个虚拟主机使用IP、名称和基于端口的配置的组合
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
